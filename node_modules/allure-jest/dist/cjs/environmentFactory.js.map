{"version":3,"file":"environmentFactory.js","names":["_nodeOs","_interopRequireDefault","require","_nodePath","_nodeProcess","_allureJsCommons","_interopRequireWildcard","allure","_sdk","_reporter","_runtime","_AllureJestTestRuntime","_utils","_excluded","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","ownKeys","keys","getOwnPropertySymbols","o","filter","enumerable","push","apply","_objectSpread","arguments","length","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","_objectWithoutProperties","_objectWithoutPropertiesLoose","indexOf","propertyIsEnumerable","_classPrivateMethodInitSpec","_checkPrivateRedeclaration","add","TypeError","_toPropertyKey","value","configurable","writable","_toPrimitive","Symbol","toPrimitive","String","Number","_assertClassBrand","ALLURE_TEST_MODE","ALLURE_HOST_NAME","ALLURE_THREAD_NAME","JEST_WORKER_ID","process","env","hostname","os","createJestEnvironment","Base","_Class_brand","WeakSet","constructor","config","context","executables","steps","scopes","skippedTestsFullNamesByTestPlan","event","name","_handleHookStart","hook","_handleHookPass","_handleHookFail","error","_handleSuiteStart","_handleSuiteEnd","_handleTestStart","test","_handleTestDone","_handleTestTodo","_handleTestPass","_handleTestFail","_handleTestSkip","_handleRunFinish","projectConfig","_ref","testEnvironmentOptions","resultsDir","restConfig","runtime","ReporterRuntime","writer","MessageWriter","FileSystemWriter","testPath","replace","rootDir","sep","testPlan","parseTestPlan","testRuntime","AllureJestTestRuntime","global","setGlobalTestRuntime","setup","teardown","handleAllureRuntimeMessage","message","executableUuid","last","runContext","applyRuntimeMessages","_getTestFullName","newTestSuitePath","getTestPath","parent","newTestPath","concat","newTestId","getTestId","_startScope","_stopScope","shouldHookBeSkipped","scopeUuid","fixtureUuid","startFixture","type","pop","updateFixture","status","Status","PASSED","stage","Stage","FINISHED","stopFixture","BROKEN","getStatusFromError","statusDetails","trace","undefined","stack","_startTest","_test$startedAt","newTestFullName","isTestPresentInTestPlan","mode","threadLabel","pid","toString","hostLabel","packageLabel","dirname","split","join","testUuid","startTest","fullName","start","startedAt","labels","LabelName","LANGUAGE","FRAMEWORK","PACKAGE","getEnvironmentLabels","updateTest","result","THREAD","HOST","getSuiteLabels","_stopTest","duration","stopTest","writeTest","RUNNING","startScope","writeScope","_test$duration","_test$duration2","errors","hasMultipleErrors","Array","isArray","firstError","details","getMessageAndTraceFromError","_test$duration3","includes","PENDING","SKIPPED","_test$duration4","writeEnvironmentInfo","writeCategoriesDefinitions","_default","exports","module"],"sources":["../../src/environmentFactory.ts"],"sourcesContent":["import type { EnvironmentContext, JestEnvironment, JestEnvironmentConfig } from \"@jest/environment\";\nimport type { Circus } from \"@jest/types\";\nimport os from \"node:os\";\nimport { dirname, sep } from \"node:path\";\nimport process from \"node:process\";\nimport * as allure from \"allure-js-commons\";\nimport { LabelName, Stage, Status } from \"allure-js-commons\";\nimport type { RuntimeMessage } from \"allure-js-commons/sdk\";\nimport { getMessageAndTraceFromError, getStatusFromError } from \"allure-js-commons/sdk\";\nimport type { TestPlanV1 } from \"allure-js-commons/sdk\";\nimport {\n  FileSystemWriter,\n  MessageWriter,\n  ReporterRuntime,\n  getEnvironmentLabels,\n  getSuiteLabels,\n  parseTestPlan,\n} from \"allure-js-commons/sdk/reporter\";\nimport { setGlobalTestRuntime } from \"allure-js-commons/sdk/runtime\";\nimport { AllureJestTestRuntime } from \"./AllureJestTestRuntime.js\";\nimport type { AllureJestConfig, AllureJestEnvironment, AllureJestProjectConfig, RunContext } from \"./model.js\";\nimport { getTestId, getTestPath, isTestPresentInTestPlan, last, shouldHookBeSkipped } from \"./utils.js\";\n\nconst { ALLURE_TEST_MODE, ALLURE_HOST_NAME, ALLURE_THREAD_NAME, JEST_WORKER_ID } = process.env;\nconst hostname = os.hostname();\n\nconst createJestEnvironment = <T extends typeof JestEnvironment>(Base: T): T => {\n  // @ts-expect-error (ts(2545)) Incorrect assumption about a mixin class: https://github.com/microsoft/TypeScript/issues/37142\n  return class extends Base {\n    testPath: string;\n    testPlan?: TestPlanV1;\n    runtime: ReporterRuntime;\n    runContext: RunContext = {\n      executables: [],\n      steps: [],\n      scopes: [],\n      skippedTestsFullNamesByTestPlan: [],\n    };\n\n    // config is AllureJestConfig in Jest v28 or greater. In older versions\n    // it's AllureJestProjectConfig. See https://github.com/jestjs/jest/pull/12461\n    constructor(config: AllureJestConfig | AllureJestProjectConfig, context: EnvironmentContext) {\n      super(config as JestEnvironmentConfig, context);\n\n      const projectConfig = \"projectConfig\" in config ? config.projectConfig : config;\n      const { resultsDir = \"allure-results\", ...restConfig } = projectConfig?.testEnvironmentOptions || {};\n\n      this.runtime = new ReporterRuntime({\n        ...restConfig,\n        writer: ALLURE_TEST_MODE\n          ? new MessageWriter()\n          : new FileSystemWriter({\n              resultsDir,\n            }),\n      });\n      this.testPath = context.testPath.replace(projectConfig.rootDir, \"\").replace(sep, \"\");\n      this.testPlan = parseTestPlan();\n\n      // @ts-ignore\n      const testRuntime = new AllureJestTestRuntime(this as AllureJestEnvironment, this.global);\n\n      // @ts-ignore\n      this.global.allure = allure;\n\n      setGlobalTestRuntime(testRuntime);\n    }\n\n    setup() {\n      return super.setup();\n    }\n\n    teardown() {\n      return super.teardown();\n    }\n\n    handleAllureRuntimeMessage(message: RuntimeMessage) {\n      const executableUuid = last(this.runContext.executables);\n\n      this.runtime.applyRuntimeMessages(executableUuid, [message]);\n    }\n\n    handleTestEvent = (event: Circus.Event) => {\n      switch (event.name) {\n        case \"hook_start\":\n          this.#handleHookStart(event.hook);\n          break;\n        case \"hook_success\":\n          this.#handleHookPass(event.hook);\n          break;\n        case \"hook_failure\":\n          this.#handleHookFail(event.hook, event.error);\n          break;\n        case \"run_describe_start\":\n          this.#handleSuiteStart();\n          break;\n        case \"run_describe_finish\":\n          this.#handleSuiteEnd();\n          break;\n        case \"test_start\":\n          this.#handleTestStart(event.test);\n          break;\n        case \"test_done\":\n          this.#handleTestDone();\n          break;\n        case \"test_todo\":\n          this.#handleTestTodo(event.test);\n          break;\n        case \"test_fn_success\":\n          this.#handleTestPass(event.test);\n          break;\n        case \"test_fn_failure\":\n          this.#handleTestFail(event.test);\n          break;\n        case \"test_skip\":\n          this.#handleTestSkip(event.test);\n          break;\n        case \"run_finish\":\n          this.#handleRunFinish();\n          break;\n        default:\n          break;\n      }\n    };\n\n    #getTestFullName(test: Circus.TestEntry) {\n      const newTestSuitePath = getTestPath(test.parent);\n      const newTestPath = newTestSuitePath.concat(test.name);\n      const newTestId = getTestId(newTestPath);\n\n      return `${this.testPath}#${newTestId}`;\n    }\n\n    #handleSuiteStart() {\n      this.#startScope();\n    }\n\n    #handleSuiteEnd() {\n      this.#stopScope();\n    }\n\n    #handleHookStart(hook: Circus.Hook) {\n      if (shouldHookBeSkipped(hook)) {\n        return;\n      }\n\n      const scopeUuid = last(this.runContext.scopes);\n      const fixtureUuid = this.runtime.startFixture(scopeUuid, /after/i.test(hook.type) ? \"after\" : \"before\", {\n        name: hook.type,\n      })!;\n\n      this.runContext.executables.push(fixtureUuid);\n    }\n\n    #handleHookPass(hook: Circus.Hook) {\n      if (shouldHookBeSkipped(hook)) {\n        return;\n      }\n\n      const fixtureUuid = this.runContext.executables.pop()!;\n\n      this.runtime.updateFixture(fixtureUuid, (r) => {\n        r.status = Status.PASSED;\n        r.stage = Stage.FINISHED;\n      });\n      this.runtime.stopFixture(fixtureUuid);\n    }\n\n    #handleHookFail(hook: Circus.Hook, error: string | Circus.Exception) {\n      if (shouldHookBeSkipped(hook)) {\n        return;\n      }\n\n      const fixtureUuid = this.runContext.executables.pop()!;\n      const status = typeof error === \"string\" ? Status.BROKEN : getStatusFromError(error as Error);\n\n      this.runtime.updateFixture(fixtureUuid, (r) => {\n        r.status = status;\n        r.statusDetails = {\n          message: typeof error === \"string\" ? error : error.message,\n          trace: typeof error === \"string\" ? undefined : error.stack,\n        };\n        r.stage = Stage.FINISHED;\n      });\n      this.runtime.stopFixture(fixtureUuid);\n    }\n\n    #startTest(test: Circus.TestEntry) {\n      const newTestSuitePath = getTestPath(test.parent);\n      const newTestFullName = this.#getTestFullName(test);\n\n      if (this.testPlan && !isTestPresentInTestPlan(newTestFullName, this.testPlan)) {\n        test.mode = \"skip\";\n        this.runContext.skippedTestsFullNamesByTestPlan.push(newTestFullName);\n        return;\n      }\n\n      const threadLabel = ALLURE_THREAD_NAME || JEST_WORKER_ID || process.pid.toString();\n      const hostLabel = ALLURE_HOST_NAME || hostname;\n      const packageLabel = dirname(this.testPath).split(sep).join(\".\");\n\n      this.#startScope();\n      const testUuid = this.runtime.startTest(\n        {\n          name: test.name,\n          fullName: newTestFullName,\n          start: test.startedAt ?? undefined,\n          labels: [\n            {\n              name: LabelName.LANGUAGE,\n              value: \"javascript\",\n            },\n            {\n              name: LabelName.FRAMEWORK,\n              value: \"jest\",\n            },\n            {\n              name: LabelName.PACKAGE,\n              value: packageLabel,\n            },\n            ...getEnvironmentLabels(),\n          ],\n        },\n        this.runContext.scopes,\n      );\n\n      this.runtime.updateTest(testUuid, (result) => {\n        if (threadLabel) {\n          result.labels.push({ name: LabelName.THREAD, value: threadLabel });\n        }\n\n        if (hostLabel) {\n          result.labels.push({ name: LabelName.HOST, value: hostLabel });\n        }\n\n        result.labels.push(...getSuiteLabels(newTestSuitePath));\n      });\n\n      this.runContext.executables.push(testUuid);\n\n      return testUuid;\n    }\n\n    #stopTest(testUuid: string, duration: number) {\n      if (!testUuid) {\n        return;\n      }\n\n      this.runtime.stopTest(testUuid, { duration });\n      this.runtime.writeTest(testUuid);\n    }\n\n    #handleTestStart(test: Circus.TestEntry) {\n      const testUuid = this.#startTest(test);\n\n      if (!testUuid) {\n        return;\n      }\n\n      this.runtime.updateTest(testUuid, (result) => {\n        result.stage = Stage.RUNNING;\n      });\n    }\n\n    #handleTestDone() {\n      this.#stopScope();\n    }\n\n    #startScope() {\n      const scopeUuid = this.runtime.startScope();\n\n      this.runContext.scopes.push(scopeUuid);\n    }\n\n    #stopScope() {\n      const scopeUuid = this.runContext.scopes.pop()!;\n\n      this.runtime.writeScope(scopeUuid);\n    }\n\n    #handleTestPass(test: Circus.TestEntry) {\n      const testUuid = this.runContext.executables.pop();\n\n      if (!testUuid) {\n        return;\n      }\n\n      this.runtime.updateTest(testUuid, (result) => {\n        result.stage = Stage.FINISHED;\n        result.status = Status.PASSED;\n      });\n      this.#stopTest(testUuid, test.duration ?? 0);\n    }\n\n    #handleTestFail(test: Circus.TestEntry) {\n      const testUuid = this.runContext.executables.pop();\n\n      if (!testUuid) {\n        return;\n      }\n\n      // jest collects all errors, but we need to report the first one because it's a reason why the test has been failed\n      const [error] = test.errors;\n      const hasMultipleErrors = Array.isArray(error);\n      const firstError: Error = hasMultipleErrors ? error[0] : error;\n      const details = getMessageAndTraceFromError(firstError);\n      const status = getStatusFromError(firstError);\n\n      this.runtime.updateTest(testUuid, (result) => {\n        result.stage = Stage.FINISHED;\n        result.status = status;\n        result.statusDetails = {\n          ...details,\n        };\n      });\n      this.#stopTest(testUuid, test.duration ?? 0);\n    }\n\n    #handleTestSkip(test: Circus.TestEntry) {\n      const newTestFullName = this.#getTestFullName(test);\n\n      if (this.runContext.skippedTestsFullNamesByTestPlan.includes(newTestFullName)) {\n        return;\n      }\n\n      const testUuid = this.runContext.executables.pop();\n\n      if (!testUuid) {\n        return;\n      }\n\n      this.runtime.updateTest(testUuid, (result) => {\n        result.stage = Stage.PENDING;\n        result.status = Status.SKIPPED;\n      });\n      this.#stopTest(testUuid, test.duration ?? 0);\n    }\n\n    #handleTestTodo(test: Circus.TestEntry) {\n      const testUuid = this.runContext.executables.pop();\n\n      if (!testUuid) {\n        return;\n      }\n\n      this.runtime.updateTest(testUuid, (result) => {\n        result.stage = Stage.PENDING;\n        result.status = Status.SKIPPED;\n      });\n      this.#stopTest(testUuid, test.duration ?? 0);\n    }\n\n    #handleRunFinish() {\n      this.runtime.writeEnvironmentInfo();\n      this.runtime.writeCategoriesDefinitions();\n    }\n  };\n};\n\nexport default createJestEnvironment;\n"],"mappings":"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","ignoreList":[]}