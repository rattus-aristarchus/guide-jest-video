{"version":3,"file":"environmentFactory.js","names":["os","dirname","sep","process","allure","LabelName","Stage","Status","getMessageAndTraceFromError","getStatusFromError","FileSystemWriter","MessageWriter","ReporterRuntime","getEnvironmentLabels","getSuiteLabels","parseTestPlan","setGlobalTestRuntime","AllureJestTestRuntime","getTestId","getTestPath","isTestPresentInTestPlan","last","shouldHookBeSkipped","ALLURE_TEST_MODE","ALLURE_HOST_NAME","ALLURE_THREAD_NAME","JEST_WORKER_ID","env","hostname","createJestEnvironment","Base","_Class_brand","WeakSet","constructor","config","context","_classPrivateMethodInitSpec","_defineProperty","executables","steps","scopes","skippedTestsFullNamesByTestPlan","event","name","_assertClassBrand","_handleHookStart","call","hook","_handleHookPass","_handleHookFail","error","_handleSuiteStart","_handleSuiteEnd","_handleTestStart","test","_handleTestDone","_handleTestTodo","_handleTestPass","_handleTestFail","_handleTestSkip","_handleRunFinish","projectConfig","_ref","testEnvironmentOptions","resultsDir","restConfig","_objectWithoutProperties","_excluded","runtime","_objectSpread","writer","testPath","replace","rootDir","testPlan","testRuntime","global","setup","teardown","handleAllureRuntimeMessage","message","executableUuid","runContext","applyRuntimeMessages","_getTestFullName","newTestSuitePath","parent","newTestPath","concat","newTestId","_startScope","_stopScope","scopeUuid","fixtureUuid","startFixture","type","push","pop","updateFixture","r","status","PASSED","stage","FINISHED","stopFixture","BROKEN","statusDetails","trace","undefined","stack","_startTest","_test$startedAt","newTestFullName","mode","threadLabel","pid","toString","hostLabel","packageLabel","split","join","testUuid","startTest","fullName","start","startedAt","labels","LANGUAGE","value","FRAMEWORK","PACKAGE","updateTest","result","THREAD","HOST","_stopTest","duration","stopTest","writeTest","RUNNING","startScope","writeScope","_test$duration","_test$duration2","errors","hasMultipleErrors","Array","isArray","firstError","details","_test$duration3","includes","PENDING","SKIPPED","_test$duration4","writeEnvironmentInfo","writeCategoriesDefinitions"],"sources":["../../src/environmentFactory.ts"],"sourcesContent":["import type { EnvironmentContext, JestEnvironment, JestEnvironmentConfig } from \"@jest/environment\";\nimport type { Circus } from \"@jest/types\";\nimport os from \"node:os\";\nimport { dirname, sep } from \"node:path\";\nimport process from \"node:process\";\nimport * as allure from \"allure-js-commons\";\nimport { LabelName, Stage, Status } from \"allure-js-commons\";\nimport type { RuntimeMessage } from \"allure-js-commons/sdk\";\nimport { getMessageAndTraceFromError, getStatusFromError } from \"allure-js-commons/sdk\";\nimport type { TestPlanV1 } from \"allure-js-commons/sdk\";\nimport {\n  FileSystemWriter,\n  MessageWriter,\n  ReporterRuntime,\n  getEnvironmentLabels,\n  getSuiteLabels,\n  parseTestPlan,\n} from \"allure-js-commons/sdk/reporter\";\nimport { setGlobalTestRuntime } from \"allure-js-commons/sdk/runtime\";\nimport { AllureJestTestRuntime } from \"./AllureJestTestRuntime.js\";\nimport type { AllureJestConfig, AllureJestEnvironment, AllureJestProjectConfig, RunContext } from \"./model.js\";\nimport { getTestId, getTestPath, isTestPresentInTestPlan, last, shouldHookBeSkipped } from \"./utils.js\";\n\nconst { ALLURE_TEST_MODE, ALLURE_HOST_NAME, ALLURE_THREAD_NAME, JEST_WORKER_ID } = process.env;\nconst hostname = os.hostname();\n\nconst createJestEnvironment = <T extends typeof JestEnvironment>(Base: T): T => {\n  // @ts-expect-error (ts(2545)) Incorrect assumption about a mixin class: https://github.com/microsoft/TypeScript/issues/37142\n  return class extends Base {\n    testPath: string;\n    testPlan?: TestPlanV1;\n    runtime: ReporterRuntime;\n    runContext: RunContext = {\n      executables: [],\n      steps: [],\n      scopes: [],\n      skippedTestsFullNamesByTestPlan: [],\n    };\n\n    // config is AllureJestConfig in Jest v28 or greater. In older versions\n    // it's AllureJestProjectConfig. See https://github.com/jestjs/jest/pull/12461\n    constructor(config: AllureJestConfig | AllureJestProjectConfig, context: EnvironmentContext) {\n      super(config as JestEnvironmentConfig, context);\n\n      const projectConfig = \"projectConfig\" in config ? config.projectConfig : config;\n      const { resultsDir = \"allure-results\", ...restConfig } = projectConfig?.testEnvironmentOptions || {};\n\n      this.runtime = new ReporterRuntime({\n        ...restConfig,\n        writer: ALLURE_TEST_MODE\n          ? new MessageWriter()\n          : new FileSystemWriter({\n              resultsDir,\n            }),\n      });\n      this.testPath = context.testPath.replace(projectConfig.rootDir, \"\").replace(sep, \"\");\n      this.testPlan = parseTestPlan();\n\n      // @ts-ignore\n      const testRuntime = new AllureJestTestRuntime(this as AllureJestEnvironment, this.global);\n\n      // @ts-ignore\n      this.global.allure = allure;\n\n      setGlobalTestRuntime(testRuntime);\n    }\n\n    setup() {\n      return super.setup();\n    }\n\n    teardown() {\n      return super.teardown();\n    }\n\n    handleAllureRuntimeMessage(message: RuntimeMessage) {\n      const executableUuid = last(this.runContext.executables);\n\n      this.runtime.applyRuntimeMessages(executableUuid, [message]);\n    }\n\n    handleTestEvent = (event: Circus.Event) => {\n      switch (event.name) {\n        case \"hook_start\":\n          this.#handleHookStart(event.hook);\n          break;\n        case \"hook_success\":\n          this.#handleHookPass(event.hook);\n          break;\n        case \"hook_failure\":\n          this.#handleHookFail(event.hook, event.error);\n          break;\n        case \"run_describe_start\":\n          this.#handleSuiteStart();\n          break;\n        case \"run_describe_finish\":\n          this.#handleSuiteEnd();\n          break;\n        case \"test_start\":\n          this.#handleTestStart(event.test);\n          break;\n        case \"test_done\":\n          this.#handleTestDone();\n          break;\n        case \"test_todo\":\n          this.#handleTestTodo(event.test);\n          break;\n        case \"test_fn_success\":\n          this.#handleTestPass(event.test);\n          break;\n        case \"test_fn_failure\":\n          this.#handleTestFail(event.test);\n          break;\n        case \"test_skip\":\n          this.#handleTestSkip(event.test);\n          break;\n        case \"run_finish\":\n          this.#handleRunFinish();\n          break;\n        default:\n          break;\n      }\n    };\n\n    #getTestFullName(test: Circus.TestEntry) {\n      const newTestSuitePath = getTestPath(test.parent);\n      const newTestPath = newTestSuitePath.concat(test.name);\n      const newTestId = getTestId(newTestPath);\n\n      return `${this.testPath}#${newTestId}`;\n    }\n\n    #handleSuiteStart() {\n      this.#startScope();\n    }\n\n    #handleSuiteEnd() {\n      this.#stopScope();\n    }\n\n    #handleHookStart(hook: Circus.Hook) {\n      if (shouldHookBeSkipped(hook)) {\n        return;\n      }\n\n      const scopeUuid = last(this.runContext.scopes);\n      const fixtureUuid = this.runtime.startFixture(scopeUuid, /after/i.test(hook.type) ? \"after\" : \"before\", {\n        name: hook.type,\n      })!;\n\n      this.runContext.executables.push(fixtureUuid);\n    }\n\n    #handleHookPass(hook: Circus.Hook) {\n      if (shouldHookBeSkipped(hook)) {\n        return;\n      }\n\n      const fixtureUuid = this.runContext.executables.pop()!;\n\n      this.runtime.updateFixture(fixtureUuid, (r) => {\n        r.status = Status.PASSED;\n        r.stage = Stage.FINISHED;\n      });\n      this.runtime.stopFixture(fixtureUuid);\n    }\n\n    #handleHookFail(hook: Circus.Hook, error: string | Circus.Exception) {\n      if (shouldHookBeSkipped(hook)) {\n        return;\n      }\n\n      const fixtureUuid = this.runContext.executables.pop()!;\n      const status = typeof error === \"string\" ? Status.BROKEN : getStatusFromError(error as Error);\n\n      this.runtime.updateFixture(fixtureUuid, (r) => {\n        r.status = status;\n        r.statusDetails = {\n          message: typeof error === \"string\" ? error : error.message,\n          trace: typeof error === \"string\" ? undefined : error.stack,\n        };\n        r.stage = Stage.FINISHED;\n      });\n      this.runtime.stopFixture(fixtureUuid);\n    }\n\n    #startTest(test: Circus.TestEntry) {\n      const newTestSuitePath = getTestPath(test.parent);\n      const newTestFullName = this.#getTestFullName(test);\n\n      if (this.testPlan && !isTestPresentInTestPlan(newTestFullName, this.testPlan)) {\n        test.mode = \"skip\";\n        this.runContext.skippedTestsFullNamesByTestPlan.push(newTestFullName);\n        return;\n      }\n\n      const threadLabel = ALLURE_THREAD_NAME || JEST_WORKER_ID || process.pid.toString();\n      const hostLabel = ALLURE_HOST_NAME || hostname;\n      const packageLabel = dirname(this.testPath).split(sep).join(\".\");\n\n      this.#startScope();\n      const testUuid = this.runtime.startTest(\n        {\n          name: test.name,\n          fullName: newTestFullName,\n          start: test.startedAt ?? undefined,\n          labels: [\n            {\n              name: LabelName.LANGUAGE,\n              value: \"javascript\",\n            },\n            {\n              name: LabelName.FRAMEWORK,\n              value: \"jest\",\n            },\n            {\n              name: LabelName.PACKAGE,\n              value: packageLabel,\n            },\n            ...getEnvironmentLabels(),\n          ],\n        },\n        this.runContext.scopes,\n      );\n\n      this.runtime.updateTest(testUuid, (result) => {\n        if (threadLabel) {\n          result.labels.push({ name: LabelName.THREAD, value: threadLabel });\n        }\n\n        if (hostLabel) {\n          result.labels.push({ name: LabelName.HOST, value: hostLabel });\n        }\n\n        result.labels.push(...getSuiteLabels(newTestSuitePath));\n      });\n\n      this.runContext.executables.push(testUuid);\n\n      return testUuid;\n    }\n\n    #stopTest(testUuid: string, duration: number) {\n      if (!testUuid) {\n        return;\n      }\n\n      this.runtime.stopTest(testUuid, { duration });\n      this.runtime.writeTest(testUuid);\n    }\n\n    #handleTestStart(test: Circus.TestEntry) {\n      const testUuid = this.#startTest(test);\n\n      if (!testUuid) {\n        return;\n      }\n\n      this.runtime.updateTest(testUuid, (result) => {\n        result.stage = Stage.RUNNING;\n      });\n    }\n\n    #handleTestDone() {\n      this.#stopScope();\n    }\n\n    #startScope() {\n      const scopeUuid = this.runtime.startScope();\n\n      this.runContext.scopes.push(scopeUuid);\n    }\n\n    #stopScope() {\n      const scopeUuid = this.runContext.scopes.pop()!;\n\n      this.runtime.writeScope(scopeUuid);\n    }\n\n    #handleTestPass(test: Circus.TestEntry) {\n      const testUuid = this.runContext.executables.pop();\n\n      if (!testUuid) {\n        return;\n      }\n\n      this.runtime.updateTest(testUuid, (result) => {\n        result.stage = Stage.FINISHED;\n        result.status = Status.PASSED;\n      });\n      this.#stopTest(testUuid, test.duration ?? 0);\n    }\n\n    #handleTestFail(test: Circus.TestEntry) {\n      const testUuid = this.runContext.executables.pop();\n\n      if (!testUuid) {\n        return;\n      }\n\n      // jest collects all errors, but we need to report the first one because it's a reason why the test has been failed\n      const [error] = test.errors;\n      const hasMultipleErrors = Array.isArray(error);\n      const firstError: Error = hasMultipleErrors ? error[0] : error;\n      const details = getMessageAndTraceFromError(firstError);\n      const status = getStatusFromError(firstError);\n\n      this.runtime.updateTest(testUuid, (result) => {\n        result.stage = Stage.FINISHED;\n        result.status = status;\n        result.statusDetails = {\n          ...details,\n        };\n      });\n      this.#stopTest(testUuid, test.duration ?? 0);\n    }\n\n    #handleTestSkip(test: Circus.TestEntry) {\n      const newTestFullName = this.#getTestFullName(test);\n\n      if (this.runContext.skippedTestsFullNamesByTestPlan.includes(newTestFullName)) {\n        return;\n      }\n\n      const testUuid = this.runContext.executables.pop();\n\n      if (!testUuid) {\n        return;\n      }\n\n      this.runtime.updateTest(testUuid, (result) => {\n        result.stage = Stage.PENDING;\n        result.status = Status.SKIPPED;\n      });\n      this.#stopTest(testUuid, test.duration ?? 0);\n    }\n\n    #handleTestTodo(test: Circus.TestEntry) {\n      const testUuid = this.runContext.executables.pop();\n\n      if (!testUuid) {\n        return;\n      }\n\n      this.runtime.updateTest(testUuid, (result) => {\n        result.stage = Stage.PENDING;\n        result.status = Status.SKIPPED;\n      });\n      this.#stopTest(testUuid, test.duration ?? 0);\n    }\n\n    #handleRunFinish() {\n      this.runtime.writeEnvironmentInfo();\n      this.runtime.writeCategoriesDefinitions();\n    }\n  };\n};\n\nexport default createJestEnvironment;\n"],"mappings":"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","ignoreList":[]}